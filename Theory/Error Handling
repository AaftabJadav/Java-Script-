Question 1: What is error handling in JavaScript? Explain the try, catch, and finally
blocks with an example
Ans:-
          - Defination-:Error handling in JavaScript means managing and responding to errors in your code

          --- JavaScript Error Handling Structure ---

JavaScript uses three main blocks for error handling:

1. try block:
Code that may throw an error is placed inside try.

2. catch block:
If an error occurs in the try, it’s caught and handled here.

3. finally block (optional):
This block runs no matter what — whether an error occurred or not. It’s used for cleanup code.

- Example:
try {
  let a = 10;
  let b = a + c;  // 'c' is not defined — this will cause an error
  console.log("This line won’t run.");
} catch (error) {
  console.log("An error occurred: " + error.message);
} finally {
  console.log("This runs no matter what.");
}

- Output:

An error occurred: c is not defined  
This runs no matter what.

Question 2: Why is error handling important in JavaScript applications?

 1. Prevents Application Crashes
Without error handling, even a small bug or unexpected input can crash the entire app. Proper handling keeps the app running smoothly.

 2. Provides User-Friendly Messages
Instead of showing confusing error codes or crashing the page, you can show clear messages like “Something went wrong, please try again.”

 3. Improves Debugging
Using catch blocks, you can log or display error details (error.message) which helps developers understand what went wrong and where.

 4. Ensures Safe Execution
You can use finally blocks to clean up resources (like stopping a loader or closing a file), whether or not an error occurred.

 5. Essential for Async Code
JavaScript heavily uses async operations (e.g., APIs, setTimeout). Errors in these need to be handled properly to avoid silent failures.


